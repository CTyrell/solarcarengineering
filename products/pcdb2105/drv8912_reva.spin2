'' =================================================================================================
''
''   File....... jm_max7219_p2.spin2
''   Purpose.... Simple MAX7219/MAX7221 serial LED driver (one device)
''               * SPI signals to MAX72xx are generated by inline PASM2
''   Author..... Jon "JonnyMac" McPhalen
''               Copyright (c) 2013-2021 Jon McPhalen
''               -- see below for terms of use
''   E-mail..... jon.mcphalen@gmail.com
''   Started....
''   Updated.... 16 JAN 2021
''
'' =================================================================================================

{
  Note: This driver works in non-decode mode. To output a character or digit, use the converstion
        methods to conver the character or digit to the proper 7-segment pattern
}


con { fixed io pins }

  DRV89_CS  = 21  { O }                                            ' 
  DRV89_SCK = 20  { O }                                            '
  DRV89_SDO = 19  { O }                                            ' MOSI
  DRV89_SDI = 18  { I }                                            ' MISO
  DRV89_SLP = 17  { O }                                            '

con { max7219 registers }

  NO_OP  = $00

  DIG_0  = $01
  DIG_1  = $02
  DIG_2  = $03
  DIG_3  = $04
  DIG_4  = $05
  DIG_5  = $06
  DIG_6  = $07
  DIG_7  = $08

  DECODE = $09                                                  ' decode register, 0 = raw, 1 = decode
  BRIGHT = $0A                                                 ' brightness, 1..15
  S_LMT  = $0B                                                  ' scan limit, 1..7
  SHUTDN = $0C                                                  ' shutdown when 1, run when 0

  D_TEST = $0F                                                  ' display test -- all segs on

  D_RAW  = 0                                                    ' decode as raw segments
  D_DEC  = 1                                                    ' decode as decimal digit (10 = dash)


var

  long  sck                                                     ' to MAX7219.13
  long  sdo                                                     ' to MAX7219.1
  'long  sdo                                                     ' to MAX7219.1
  long  cs                                                      ' to MAX7219.12
  long  ticks                                                   ' ticks in 1/4 clock period

  byte  decodebits                                              ' state of decode bits
  byte  segments[8]                                             ' internal segments register buffer


pub null()

'' This is not a top-level object


pub start() | khz

'' Assign and configures pins for MAX7219/21
'' -- cpin is SPI sck
'' -- dpin is SPI sdo
'' -- cspin is chip select
'' -- khz is clock frequency in kilohertz
  khz := 1000
'  sck, sdo, cs := cpin, dpin, cspin                             ' save pins

  pinhigh(DRV89_CS)                                                   ' disable MAX72xx
  pinlow(DRV89_SCK)                                                   ' make outputs
  pinlow(DRV89_SDO)
  waitms(1)

  pinhigh(DRV89_SLP)
  ticks := (clkfreq / (khz * 1_000)) >> 2 - 4                   ' ticks in 1/4 clock period
  waitms(1)

  inout($1A ,$40)  ' Keep half bridges active after open load detect


pub stop()
'' Shut down the smart pin
  _dirl( DRV89_CS )
  _dirl( DRV89_SCK )
  _dirl( DRV89_SDO )
  _dirl( DRV89_SLP )


pub shutdown(state)

'' Puts MAX7219/21 into shutdown mode if state <> 0/false

  if (state)
    out(SHUTDN, 0)
  else
    out(SHUTDN, 1)



pub out(r, value) | bits, cpin, dpin, cspin, tix

'' Update register in MAX7219/21 with value

  bits.byte[3] := r                                             ' set register
  bits.byte[2] := value                                         ' set value

  longmove(@tix, @ticks, 1)                                      ' get connection parameters

  org

      ' shouldn't be needed          drvl     #DRV89_SCK
      '          drvl      #DRV89_SDO                                   ' leave data pin low

                drvl      #DRV89_CS                                 ' enable
                nop

                rep       #8, #16                               ' output 16 bits
                 shl      bits, #1                      wc      ' bits.31 --> c
                 drvc     #DRV89_SDO                                  ' write to data pin
                 waitx    tix                                   ' let data pin settle
                 drvh     #DRV89_SCK                                  ' clock the bit
                 waitx    tix
                 waitx    tix
                 drvl     #DRV89_SCK
                 waitx    tix

                drvh      #DRV89_CS                                 ' load into MAX72xx
                drvl      #DRV89_SDO                                   ' leave data pin low
  end


pub inout(r, value) : rxd | bits, cpin, dpin, cspin, tix

'' Update register in MAX7219/21 with value

  bits.byte[3] := r                                             ' set register
  bits.byte[2] := value                                         ' set value

  longmove(@cpin, @sck, 4)                                      ' get connection parameters
'  longmove(@tix, @ticks, 1)                                      ' get connection parameters
  rxd := 0 
  org

                 drvl     #DRV89_SCK
                drvl      #DRV89_SDO                                   ' leave data pin low

                drvl      #DRV89_CS                                 ' enable
                nop

                rep       #10, #16                               ' output 16 bits
                 shl      bits, #1                      wc      ' bits.31 --> c
                 drvc     #DRV89_SDO                                  ' write to data pin
                 waitx    tix                                   ' let data pin settle
                 drvh     #DRV89_SCK                                  ' clock the bit
                 waitx    tix
                 waitx    tix
                 testp    #DRV89_SDI                    wc
                 rcl      rxd,#1
                 drvl     #DRV89_SCK
                 waitx    tix

                drvh      #DRV89_CS                                 ' load into MAX72xx
                drvl      #DRV89_SDO                                   ' leave data pin low
  end


con { license }

{{

  Terms of Use: MIT License

  Permission is hereby granted, free of charge, to any person obtaining a copy of this
  software and associated documentation files (the "Software"), to deal in the Software
  without restriction, including without limitation the rights to use, copy, modify,
  merge, publish, distribute, sublicense, and/or sell copies of the Software, and to
  permit persons to whom the Software is furnished to do so, subject to the following
  conditions:

  The above copyright notice and this permission notice shall be included in all copies
  or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
  INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
  PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
  HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
  CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE
  OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

}}
